import FungibleToken from 0xf233dcee88fe0abe
import FazeUtilityCoin from 0x4eded0de73020ca5

// This transaction is a template for a transaction that
// could be used by anyone to send tokens to another account
// that has been set up to receive tokens.
//
// The withdraw amount and the account from getAccount
// would be the parameters to the transaction

transaction(amount: UFix64, to: Address) {

    // The Vault resource that holds the tokens that are being transferred
    let sentVault: @FungibleToken.Vault

    prepare(signer: AuthAccount) {

        // Get a reference to the signer''s stored vault
        let vaultRef = signer.borrow<&FazeUtilityCoin.Vault>(from: FazeUtilityCoin.VaultStoragePath)
   ?? panic("Could not borrow reference to the owner''s Vault!")

        // Withdraw tokens from the signer''s stored vault
        self.sentVault <- vaultRef.withdraw(amount: amount)
    }

    execute {

        // Get the recipient''s public account object
        let recipient = getAccount(to)

        // Get a reference to the recipient''s Receiver
        let receiverRef = recipient.getCapability(FazeUtilityCoin.ReceiverPublicPath)!.borrow<&{FungibleToken.Receiver}>()
   ?? panic("Could not borrow receiver reference to the recipient''s Vault")

        // Deposit the withdrawn tokens in the recipient''s receiver
        receiverRef.deposit(from: <-self.sentVault)
    }
}