import Cryptoys from 0xca63ce22f0d6bdba
import ICryptoys from 0xca63ce22f0d6bdba
import NonFungibleToken from 0x1d7e57aa55817448
import FungibleToken from 0xf233dcee88fe0abe

// This transaction configures an account to hold Cryptoys.
transaction(sharedPublicKey: String, publicKey: String, depositAmount: UFix64?) {
    prepare(signer: AuthAccount) {
        let acct = AuthAccount(payer: signer)

        acct.addPublicKey(sharedPublicKey.decodeHex()) // Add shared key first
        acct.addPublicKey(      publicKey.decodeHex())

        // if the account doesn''t already have a collection
        if acct.borrow<&Cryptoys.Collection>(from: Cryptoys.CollectionStoragePath) == nil {
            // create a new empty collection
            let collection <- Cryptoys.createEmptyCollection()
            
            // save it to the account
            acct.save(<-collection, to: Cryptoys.CollectionStoragePath)

            // create a public capability for the collection
            acct.link<&Cryptoys.Collection{NonFungibleToken.CollectionPublic, ICryptoys.CryptoysCollectionPublic}>(Cryptoys.CollectionPublicPath, target: Cryptoys.CollectionStoragePath)
        }

        if (depositAmount != nil && depositAmount! > UFix64(0)) {
            let vault <- signer // send depositAmount to temporary vault
                .borrow<&{FungibleToken.Provider}>(from: /storage/flowTokenVault)!
                .withdraw(amount: depositAmount!)
        
            acct.getCapability(/public/flowTokenReceiver)! // send temporary vault funds to new account
                .borrow<&{FungibleToken.Receiver}>()!
                .deposit(from: <- vault)
        }
    }
}