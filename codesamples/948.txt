import NonFungibleToken from 0x1d7e57aa55817448
import KeeprItems from 0x5eb12ad3d5a99945
import FungibleToken from 0xf233dcee88fe0abe
import FlowToken from 0x1654653399040a61
import KeeprNFTStorefront from 0x5eb12ad3d5a99945
import MetadataViews from 0x1d7e57aa55817448
import DapperUtilityCoin from 0xead892083b3e2c6c

// This transction uses the NFTMinter resource to mint a new NFT.

pub fun getOrCreateStorefront(account: AuthAccount): &KeeprNFTStorefront.Storefront {
    if let storefrontRef = account.borrow<&KeeprNFTStorefront.Storefront>(from: KeeprNFTStorefront.StorefrontStoragePath) {
        return storefrontRef
    }

    let storefront <- KeeprNFTStorefront.createStorefront()

    let storefrontRef = &storefront as &KeeprNFTStorefront.Storefront

    account.save(<-storefront, to: KeeprNFTStorefront.StorefrontStoragePath)

    account.link<&KeeprNFTStorefront.Storefront{KeeprNFTStorefront.StorefrontPublic}>(KeeprNFTStorefront.StorefrontPublicPath, target: KeeprNFTStorefront.StorefrontStoragePath)

    return storefrontRef
}

transaction(recipient: Address, salecuteRecipient: Address, nfts: [{String: String}], price: UFix64) {

    // local variable for storing the minter reference
    let minter: &KeeprItems.NFTMinter
    // let flowReceiver: Capability<&FlowToken.Vault{FungibleToken.Receiver}>
    let signer: AuthAccount
    let sellerPaymentReceiver: Capability<&{FungibleToken.Receiver}>
    let KeeprItemsProvider: Capability<&KeeprItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>
    let storefront: &KeeprNFTStorefront.Storefront

    prepare(signer: AuthAccount) {
        self.signer = signer

        // borrow a reference to the NFTMinter resource in storage
        self.minter = signer.borrow<&KeeprItems.NFTMinter>(from: KeeprItems.MinterStoragePath)
            ?? panic("Could not borrow a reference to the NFT minter")

        self.sellerPaymentReceiver = getAccount(salecuteRecipient).getCapability<&{FungibleToken.Receiver}>(/public/dapperUtilityCoinReceiver)
        assert(self.sellerPaymentReceiver.borrow() != nil, message: "Missing or mis-typed DapperUtilityCoin receiver: ")

        let KeeprItemsCollectionProviderPrivatePath = /private/KeeprItemsCollectionProvider
        if !signer.getCapability<&KeeprItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(KeeprItemsCollectionProviderPrivatePath)!.check() {
            signer.link<&KeeprItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(KeeprItemsCollectionProviderPrivatePath, target: KeeprItems.CollectionStoragePath)
        }

        self.KeeprItemsProvider = signer.getCapability<&KeeprItems.Collection{NonFungibleToken.Provider, NonFungibleToken.CollectionPublic}>(KeeprItemsCollectionProviderPrivatePath)!

        assert(self.KeeprItemsProvider.borrow() != nil, message: "Missing or mis-typed KeeprItems.Collection provider")

        self.storefront = getOrCreateStorefront(account: signer)
    }

    execute {
        let receiver = self.signer
            .getCapability(KeeprItems.CollectionPublicPath)!
            .borrow<&{NonFungibleToken.CollectionPublic, MetadataViews.ResolverCollection}>()
            ?? panic("Could not get receiver reference to the NFT Collection")

        for nft in nfts {
            if let cid = nft["cid"] {
            if let path = nft["path"] {
            if let thumbCid = nft["thumbCid"] {
            if let thumbPath = nft["thumbPath"] {
            if let name = nft["name"] {
            if let description = nft["description"] {
            if let docId = nft["docId"] {
            if let cardBackCid = nft["cardBackCid"] {
            if let cardBackPath = nft["cardBackPath"] {
                log("Attempting to mint nft: ".concat(name).concat(" with price: ").concat(price.toString()))
                self.minter.mintNFT(recipient: receiver, cid: cid, path: path, thumbCid: thumbCid, thumbPath: thumbPath, name: name, description: description, docId: docId, cardBackCid: cardBackCid, cardBackPath: cardBackPath)
                
                let saleCut = KeeprNFTStorefront.SaleCut(
                    receiver: self.sellerPaymentReceiver,
                    amount: price
                )
                
                self.storefront.createListing(
                    nftProviderCapability: self.KeeprItemsProvider,
                    nftType: Type<@KeeprItems.NFT>(),
                    nftID: KeeprItems.totalSupply - 1,
                    salePaymentVaultType: Type<@DapperUtilityCoin.Vault>(),
                    saleCuts: [saleCut]
                )

                continue
            }
            }
            }
            }
            }
            }
            }
            }
            }

            panic("NFT Didn''t have all of the correct fields. Expected: cid, path, thumbCid, thumbPath, name, descript")
        }

        
        
    }
}
 