import FungibleToken from 0xf233dcee88fe0abe
import TopShotMarketV3 from 0xc1e4f4f4c4257510
import TopShot from 0x0b2a3299cc857e29
import Market from 0xc1e4f4f4c4257510

transaction() {

 prepare(acct: AuthAccount) {

  // check if moment is currently listed
  var listed = false
  if let marketV3CollectionRef = acct.getCapability(/public/topshotSalev3Collection)
   .borrow<&{Market.SalePublic}>() {

   let salePrice = marketV3CollectionRef.getPrice(tokenID: UInt64(35064175))

   if salePrice != nil {
    listed = true
   }
  } else if let marketV1CollectionRef = acct.getCapability(/public/topshotSaleCollection)
   .borrow<&{Market.SalePublic}>() {

   let salePrice = marketV1CollectionRef.getPrice(tokenID: UInt64(35064175))

   if salePrice != nil {
    listed = true
   }
  } 
  if listed {
   panic("moment is already listed for sale")
  }

  // check to see if a v3 sale collection already exists
  if acct.borrow<&TopShotMarketV3.SaleCollection>(from: TopShotMarketV3.marketStoragePath) == nil {
   // get the fungible token capabilities for the owner and beneficiary
   let ownerCapability = acct.getCapability<&{FungibleToken.Receiver}>(/public/dapperUtilityCoinReceiver)
   let beneficiaryCapability = getAccount(0xfaf0cc52c6e3acaf).getCapability<&{FungibleToken.Receiver}>(/public/dapperUtilityCoinReceiver)

   let ownerCollection = acct.link<&TopShot.Collection>(/private/MomentCollection, target: /storage/MomentCollection)!

   // get a capability for the v1 collection
   var v1SaleCollection: Capability<&Market.SaleCollection>? = nil
   if acct.borrow<&Market.SaleCollection>(from: /storage/topshotSaleCollection) != nil {
    v1SaleCollection = acct.link<&Market.SaleCollection>(/private/topshotSaleCollection, target: /storage/topshotSaleCollection)!
   }

   // create a new sale collection
   let topshotSaleCollection <- TopShotMarketV3.createSaleCollection(ownerCollection: ownerCollection,
                   ownerCapability: ownerCapability,
                   beneficiaryCapability: beneficiaryCapability,
                   cutPercentage: 0.050000,
                   marketV1Capability: v1SaleCollection)
   
   // save it to storage
   acct.save(<-topshotSaleCollection, to: TopShotMarketV3.marketStoragePath)
  
   // create a public link to the sale collection
   acct.link<&TopShotMarketV3.SaleCollection{Market.SalePublic}>(TopShotMarketV3.marketPublicPath, target: TopShotMarketV3.marketStoragePath)
  }

  // borrow a reference to the sale
  let topshotSaleCollection = acct.borrow<&TopShotMarketV3.SaleCollection>(from: TopShotMarketV3.marketStoragePath)
   ?? panic("Could not borrow from sale in storage")
  
  // put the moment up for sale
  topshotSaleCollection.listForSale(tokenID: 35064175, price: UFix64(1))
  
 }
}