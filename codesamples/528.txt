// Transaction Version: 1.1

import FungibleToken from 0xf233dcee88fe0abe
import NonFungibleToken from 0x1d7e57aa55817448
import DapperUtilityCoin from 0xead892083b3e2c6c
import FlowUtilityToken from 0xead892083b3e2c6c
import NFTStorefrontV2 from 0x4eb8a10cb9f87357
import MetadataViews from 0x1d7e57aa55817448
import DimensionX from 0xe3ad6030cbaff1c2
import DapperStorageRent from 0xa08e88e23f332538

transaction(ownerAddress: Address, listingResourceID: UInt64, expectedPrice: UFix64, signatureExpiration: UInt64, signature: String) {
    let paymentVault: @FungibleToken.Vault
    let nftCollection: &DimensionX.Collection{NonFungibleToken.Receiver}
    let storefront: &NFTStorefrontV2.Storefront{NFTStorefrontV2.StorefrontPublic}
    let listing: &NFTStorefrontV2.Listing{NFTStorefrontV2.ListingPublic}
    let mainDapperVault: &FungibleToken.Vault
    let balanceBeforeTransfer: UFix64
    let purchaserAddress: Address

    prepare(dapper: AuthAccount, acct: AuthAccount) {
        self.purchaserAddress = acct.address

        // borrow seller''s storefront reference
        self.storefront = getAccount(ownerAddress)
            .getCapability<&NFTStorefrontV2.Storefront{NFTStorefrontV2.StorefrontPublic}>(
                NFTStorefrontV2.StorefrontPublicPath
            )!
            .borrow()
            ?? panic("Could not borrow Storefront from provided address")

        // borrow storefront listing
        self.listing = self.storefront.borrowListing(listingResourceID: listingResourceID)
                    ?? panic("No Offer with that ID in Storefront")

        let price = self.listing.getDetails().salePrice
        assert(expectedPrice == price, message: "Actual price does not match expected: ".concat(price.toString()))

        let listingPaymentVaultType = self.listing.getDetails().salePaymentVaultType

        if listingPaymentVaultType == Type<@DapperUtilityCoin.Vault>() {
            // Withdraw mainDapperUtilityCoinVault from Dapper''s account
            self.mainDapperVault = dapper.borrow<&DapperUtilityCoin.Vault>(from: /storage/dapperUtilityCoinVault)
                ?? panic("Cannot borrow DapperUtilityCoin vault from account storage")
        } else {
            self.mainDapperVault = dapper.borrow<&FlowUtilityToken.Vault>(from: /storage/flowUtilityTokenVault)
                ?? panic("Cannot borrow FlowUtilityToken vault from account storage")
        }

        self.balanceBeforeTransfer = self.mainDapperVault.balance
        self.paymentVault <- self.mainDapperVault.withdraw(amount: price)

        // create a new collection if the account doesn''t have one
        if acct.borrow<&DimensionX.Collection{NonFungibleToken.Receiver}>(from: /storage/dmxCollection) == nil {
            let collection <- DimensionX.createEmptyCollection() as! @DimensionX.Collection
            acct.save(<-collection, to: /storage/dmxCollection)
            acct.link<&DimensionX.Collection{DimensionX.CollectionPublic, NonFungibleToken.CollectionPublic, NonFungibleToken.Receiver, MetadataViews.ResolverCollection}>(/public/dmxCollection, target: /storage/dmxCollection)
        }

        // borrow receiver''s collection
        self.nftCollection = acct.borrow<&DimensionX.Collection{NonFungibleToken.Receiver}>(
            from: /storage/dmxCollection
        ) ?? panic("Cannot borrow NFT collection receiver from account")

        // verify signature
        let publicKey = PublicKey(
            publicKey: "dddd52da46af51203d5101de0214c2f0a22d97bcc0c824f6a2dfe91baa4e94465d2f9ffd8180d84fcfa72dc78cdebe3842a7b1a843e76444d81bdbf77ff29be1".decodeHex(),
            signatureAlgorithm: SignatureAlgorithm.ECDSA_P256
        )

        let data = acct.address.toString()
            .concat(":")
            .concat(ownerAddress.toString())
            .concat(":")
            .concat(listingResourceID.toString())
            .concat(":")
            .concat(expectedPrice.toString())
            .concat(":")
            .concat(signatureExpiration.toString())

        let isValid = publicKey.verify(
            signature: signature.decodeHex(),
            signedData: data.utf8,
            domainSeparationTag: "FLOW-V0.0-user",
            hashAlgorithm: HashAlgorithm.SHA3_256
        )

        assert(isValid, message: "Invalid signature for message: ".concat(data))
        assert(UInt64(getCurrentBlock().timestamp) <= signatureExpiration, message: "Signature expired")
    }

    execute {
        // purchase listing
        let item <- self.listing.purchase(
            payment: <-self.paymentVault,
            commissionRecipient: nil
        )

        // deposit to buyer''s collection and clean up storefront
        self.nftCollection.deposit(token: <-item)

        // refill dapper wallet storage fees
        if DapperStorageRent.checkEligibility(self.purchaserAddress) {
            DapperStorageRent.tryRefill(self.purchaserAddress)
        }
    }

    // Check that all dapper balance was routed back to Dapper
    post {
        self.mainDapperVault.balance == self.balanceBeforeTransfer: "dapper balance leakage"
    }
}