import FungibleToken from 0xf233dcee88fe0abe
import NonFungibleToken from 0x1d7e57aa55817448
import DapperUtilityCoin from 0xead892083b3e2c6c
import Golazos from 0x87ca73a41bb50ad5
import NFTStorefrontV2 from 0x4eb8a10cb9f87357
import MetadataViews from 0x1d7e57aa55817448

/// Transaction facilitates the purchase of listed NFT.
/// It takes the storefront address, listing resource that need
/// to be purchased & a address that will takeaway the commission.
///
/// Buyer of the listing (,i.e. underling NFT) would authorize and sign the
/// transaction and if purchase happens then transacted NFT would store in
/// buyer''s collection.

transaction(
    storefrontAddress: Address, 
    listingResourceID: UInt64, 
    expectedPrice: UFix64,
    metadata: {String: String}
) {
    let paymentVault: @FungibleToken.Vault
    let GolazosCollection: &Golazos.Collection{NonFungibleToken.Receiver}
    let storefront: &NFTStorefrontV2.Storefront{NFTStorefrontV2.StorefrontPublic}
    let listing: &NFTStorefrontV2.Listing{NFTStorefrontV2.ListingPublic}
    var commissionRecipientCap: Capability<&{FungibleToken.Receiver}>?

    // the merchant account will be the only recipient
    let commissionRecipient: Address?

    prepare(universalDucPayer: AuthAccount, buyer: AuthAccount) {
        self.commissionRecipient = 0x87ca73a41bb50ad5

        self.commissionRecipientCap = nil
        assert(storefrontAddress != buyer.address, message : "Buyer and seller can not be same")
        // Access the storefront public resource of the seller to purchase the listing.
        self.storefront = getAccount(storefrontAddress)
            .getCapability<&NFTStorefrontV2.Storefront{NFTStorefrontV2.StorefrontPublic}>(
                NFTStorefrontV2.StorefrontPublicPath
            )!
            .borrow()
            ?? panic("Could not borrow Storefront from provided address")

        // Borrow the listing
        self.listing = self.storefront.borrowListing(listingResourceID: listingResourceID)
                    ?? panic("No Offer with that ID in Storefront")
        let price = self.listing.getDetails().salePrice

        // perform check to ensure price presented to the user matches the on-chain price
        if expectedPrice != price {
            panic("Sale price not expected value")
        }

        // Access the vault of the buyer to pay the sale price of the listing.
        let mainDucVault = universalDucPayer.borrow<&DapperUtilityCoin.Vault>(from: /storage/dapperUtilityCoinVault)
            ?? panic("Cannot borrow DUC vault from universalDucPayer account storage")
        self.paymentVault <- mainDucVault.withdraw(amount: price)

        // Initialize the Golazos collection if the buyer does not already have one
        if buyer.borrow<&Golazos.Collection>(from: Golazos.CollectionStoragePath) == nil {
            // save it to the account
            buyer.save(<-Golazos.createEmptyCollection(), to: Golazos.CollectionStoragePath)
            // create a public capability for the collection
            buyer.link<&Golazos.Collection{NonFungibleToken.CollectionPublic, Golazos.MomentNFTCollectionPublic}>(
                Golazos.CollectionPublicPath,
                target: Golazos.CollectionStoragePath
            )?? panic("Could not link Golazos.Collection Pub Path");
        }

        // Access the buyer''s NFT collection to store the purchased NFT.
        self.GolazosCollection = buyer.borrow<&Golazos.Collection{NonFungibleToken.Receiver}>(
            from: Golazos.CollectionStoragePath
        )!

        // Fetch the commission amt.
        let commissionAmount = self.listing.getDetails().commissionAmount

        if self.commissionRecipient != nil && commissionAmount != 0.0 {
            // Access the capability to receive the commission.
            let _commissionRecipientCap = getAccount(self.commissionRecipient!).getCapability<&{FungibleToken.Receiver}>(/public/dapperUtilityCoinReceiver)
            assert(_commissionRecipientCap.check(), message: "Commission Recipient doesn''t have DUC receiving capability")
            self.commissionRecipientCap = _commissionRecipientCap
        } else if commissionAmount == 0.0 {
            self.commissionRecipientCap = nil
        } else {
            panic("Commission recipient can not be empty when commission amount is non zero")
        }
    }

    execute {
        // Purchase the NFT
        let item <- self.listing.purchase(
            payment: <-self.paymentVault,
            commissionRecipient: self.commissionRecipientCap
        )
        // Deposit the NFT in the buyer''s collection.
        self.GolazosCollection.deposit(token: <-item)
        // Be kind and recycle
        self.storefront.cleanupPurchasedListings(listingResourceID: listingResourceID)
    }
}