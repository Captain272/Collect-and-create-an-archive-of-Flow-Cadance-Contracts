import TopShot from 0x0b2a3299cc857e29
import FlowToken from 0x1654653399040a61
import FungibleToken from 0xf233dcee88fe0abe
import TokenForwarding from 0xe544175ee0461c4b
import DapperUtilityCoin from 0xead892083b3e2c6c
import FlowUtilityToken from 0xead892083b3e2c6c
import PrivateReceiverForwarder from 0x18eb4ee6b3c026d2

// This transaction is used to create a user''s Flow account, initializing it with a key that we control,
// a TopShot moment collection and receiver, and a FlowToken receiver that forwards tokens to Dapper.
transaction(publicKeys: [[UInt8]]) {
    prepare(dapperPayer: AuthAccount) {
        // Pay for the account creation with the Dapper payer
        let acct = AuthAccount(payer: dapperPayer)

        for key in publicKeys {
            acct.addPublicKey(key)
        }

        let collection <- TopShot.createEmptyCollection()
        // Put a new Collection in storage
        acct.save(<-collection, to: /storage/MomentCollection)

        // create a public capability for the collection
        acct.link<&{TopShot.MomentCollectionPublic}>(/public/MomentCollection, target: /storage/MomentCollection)

        // Destroy Dapper user''s FLOW token receiver
        acct.unlink(/public/flowTokenReceiver)

        // Create a private receiver
        acct.link<&{FungibleToken.Receiver}>(
            /private/flowTokenReceiver,
            target: /storage/flowTokenVault
        )
        let receiverCapability = acct.getCapability<&{FungibleToken.Receiver}>(/private/flowTokenReceiver)

        // Use the private receiver to create a private forwarder
        let forwarder <- PrivateReceiverForwarder.createNewForwarder(recipient: receiverCapability)

        acct.save(<-forwarder, to: PrivateReceiverForwarder.PrivateReceiverStoragePath)

        acct.link<&PrivateReceiverForwarder.Forwarder>(
            PrivateReceiverForwarder.PrivateReceiverPublicPath,
            target: PrivateReceiverForwarder.PrivateReceiverStoragePath
        )

        // Get a Receiver reference for the Dapper account that will be the recipient of the forwarded DUC
        let dapper = getAccount(0xead892083b3e2c6c)
        let dapperDUCReceiver = dapper.getCapability(/public/dapperUtilityCoinReceiver)!

        // Create a new Forwarder resource for DUC and store it in the new account''s storage
        let ducForwarder <- TokenForwarding.createNewForwarder(recipient: dapperDUCReceiver)
        acct.save(<-ducForwarder, to: /storage/dapperUtilityCoinReceiver)

        // Publish a Receiver capability for the new account, which is linked to the DUC Forwarder
        acct.link<&DapperUtilityCoin.Vault{FungibleToken.Receiver}>(
            /public/dapperUtilityCoinReceiver,
            target: /storage/dapperUtilityCoinReceiver
        )

        // FUT Setup
        let dapperFUTReceiver = dapper.getCapability(/public/flowUtilityTokenReceiver)!

        let futForwarder <- TokenForwarding.createNewForwarder(recipient: dapperFUTReceiver)
        acct.save(<-futForwarder, to: /storage/flowUtilityTokenReceiver)

        acct.link<&FlowUtilityToken.Vault{FungibleToken.Receiver}>(
            /public/flowUtilityTokenReceiver,
            target: /storage/flowUtilityTokenReceiver
        )

    }
}