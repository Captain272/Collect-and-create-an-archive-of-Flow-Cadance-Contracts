import FungibleToken from 0xf233dcee88fe0abe
import NonFungibleToken from 0x1d7e57aa55817448
import FiatToken from 0xb19436aae4d94622
import Flowty from 0x5c57f79c6694797f

transaction(fundingResourceID: UInt64, flowtyMarketplaceAddress: Address) {
    let paymentVault: @FungibleToken.Vault
    let marketplace: &Flowty.FlowtyMarketplace{Flowty.FlowtyMarketplacePublic}
    let funding: &Flowty.Funding{Flowty.FundingPublic}

    prepare(acct: AuthAccount) {
        self.marketplace = getAccount(flowtyMarketplaceAddress)
            .getCapability<&Flowty.FlowtyMarketplace{Flowty.FlowtyMarketplacePublic}>(
                Flowty.FlowtyMarketplacePublicPath
            )!
            .borrow()
            ?? panic("Could not borrow FlowtyMarketplace from provided address")

        self.funding = self.marketplace.borrowFunding(fundingResourceID: fundingResourceID)
                    ?? panic("No Funding with that ID in FlowtyMarketplace")

        let repaymentAmount = self.funding.getDetails().repaymentAmount

        let vault = acct.borrow<&FiatToken.Vault>(from: FiatToken.VaultStoragePath)
            ?? panic("Cannot borrow FiatToken vault from acct storage")

        self.paymentVault <- vault.withdraw(amount: repaymentAmount)

    }

    execute {
        self.funding.repay(payment: <-self.paymentVault)
    }
}